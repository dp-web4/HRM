"""
Convert large-scale behavior JSON files to SVK JSONL format

Takes behavior files generated by generate_large_behaviors.py and converts them
to the JSONL format expected by SVK pipeline.
"""

import json
import argparse
from pathlib import Path


def convert_to_svk_format(behaviors_file, output_file, speaker="model"):
    """
    Convert behaviors JSON to SVK JSONL format

    Args:
        behaviors_file: Path to behaviors JSON (from generate_large_behaviors.py)
        output_file: Path to output JSONL file
        speaker: Speaker identifier for the turns
    """
    # Load behaviors
    with open(behaviors_file, 'r') as f:
        behaviors = json.load(f)

    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # Convert each behavior to a conversation turn
    turns = []
    for idx, behavior in enumerate(behaviors):
        turn = {
            "conversation_id": f"large_scale_{idx}",
            "turn_number": 0,
            "speaker": speaker,
            "text": behavior['response'],
            "metadata": {
                "prompt": behavior['prompt'],
                "category": behavior['metadata']['category'],
                "index": behavior['metadata']['index']
            }
        }
        turns.append(turn)

    # Write JSONL
    with open(output_file, 'w') as f:
        for turn in turns:
            f.write(json.dumps(turn) + '\n')

    print(f"Converted {len(turns)} behaviors to {output_file}")
    return len(turns)


def main():
    parser = argparse.ArgumentParser(description='Convert large-scale behaviors to SVK format')
    parser.add_argument('input', help='Input behaviors JSON file')
    parser.add_argument('output', help='Output JSONL file')
    parser.add_argument('--speaker', default='model', help='Speaker identifier')

    args = parser.parse_args()

    convert_to_svk_format(args.input, args.output, args.speaker)


if __name__ == '__main__':
    main()
