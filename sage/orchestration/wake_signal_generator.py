#!/usr/bin/env python3
"""
SAGE Wake Signal Generator

Creates a wake signal file when SAGE needs strategic attention.
This is the bridge between autonomous L-level monitoring and H-level reasoning.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict


class WakeSignalGenerator:
    """Generate wake signals for Claude's attention"""

    def __init__(self, signal_file: str = "/tmp/claude_wake_signal_sage.md"):
        self.signal_file = Path(signal_file)

    def generate_signal(self, salience_result: Dict):
        """
        Generate wake signal markdown file

        Args:
            salience_result: Output from SAGESalienceCalculator
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        score = salience_result.get("salience_score", 0.0)
        reasons = salience_result.get("reasons", [])
        breakdown = salience_result.get("breakdown", {})
        recommendations = salience_result.get("recommendations", [])

        signal_content = f"""# 🔔 SAGE Development Attention Needed

**Time**: {timestamp}
**Salience Score**: {score:.2f} (threshold: 0.5)
**Status**: ⚠️ ATTENTION REQUIRED

---

## Why This Matters

"""

        # Add reasons
        for reason in reasons:
            signal_content += f"- {reason}\n"

        signal_content += f"""

---

## Salience Breakdown

"""

        # Add breakdown
        for metric, value in sorted(breakdown.items(), key=lambda x: x[1], reverse=True):
            bar = "█" * int(value * 20)
            signal_content += f"- **{metric}**: {value:.2f} {bar}\n"

        signal_content += f"""

---

## Quick Context

**SAGE Status**: Check `/home/dp/ai-workspace/HRM/sage/STATUS.md`
**Orchestration**: `/home/dp/ai-workspace/HRM/sage/orchestration/`
**Training**: `/home/dp/ai-workspace/HRM/sage/training/`

---

## Recommended Actions

"""

        for rec in recommendations:
            signal_content += f"1. {rec}\n"

        signal_content += f"""

---

## Next Steps

```bash
# Check SAGE status
cat /home/dp/ai-workspace/HRM/sage/STATUS.md

# Review orchestration agents
ls -la /home/dp/ai-workspace/HRM/sage/orchestration/agents/*/

# Check for GR00T integration issues
grep -n "AttributeError\\|TODO\\|FIXME" /home/dp/ai-workspace/HRM/sage/orchestration/real_groot_sage.py

# Run compliance validator
cd /home/dp/ai-workspace/HRM
python3 sage/economy/compliance_validator.py

# Clear this signal when done
rm {self.signal_file}
```

---

**Philosophy**: "The scheduler is an alarm clock with good timing - it says 'hey, Claude, wake up and see what SAGE needs'."

**L-Level (This Script)**: Autonomous monitoring ✅
**Salience Calculation**: Threshold exceeded ⚠️
**H-Level (You)**: Strategic attention required 🎯

---

*Generated by SAGE Autonomous Attention System*
*Fractal implementation of consciousness routing at development scale*
"""

        # Write signal file
        self.signal_file.write_text(signal_content)
        print(f"✅ Wake signal created: {self.signal_file}")

    def clear_signal(self):
        """Remove wake signal file"""
        if self.signal_file.exists():
            self.signal_file.unlink()
            print(f"✅ Wake signal cleared: {self.signal_file}")
        else:
            print("ℹ️ No wake signal to clear")

    def check_signal_exists(self) -> bool:
        """Check if wake signal currently exists"""
        return self.signal_file.exists()


def main():
    """Generate or clear wake signal based on salience"""
    import sys

    generator = WakeSignalGenerator()

    if len(sys.argv) > 1 and sys.argv[1] == "clear":
        generator.clear_signal()
        return 0

    # Read salience result from stdin or file
    try:
        salience_result = json.load(sys.stdin)
    except:
        print("Error: Expected JSON salience result on stdin", file=sys.stderr)
        return 1

    if salience_result.get("attention_needed", False):
        generator.generate_signal(salience_result)
        return 1  # Exit code 1 = attention needed
    else:
        # Clear any existing signal
        if generator.check_signal_exists():
            generator.clear_signal()
        return 0  # Exit code 0 = no attention needed


if __name__ == "__main__":
    import sys
    sys.exit(main())
